workflows:
  version: 2
  build-deploy:
    jobs:
      - unit-test
      - package-docker:
          requires:
            - unit-test
          filters:
            branches:
              only: master
      - deploy-GCP:
          requires:
            - package-docker
          filters:
            branches:
              only: master
   



version: 2
jobs:
  unit-test:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - circleci-k8s-demo-mvn-V2-{{ checksum "pom.xml" }}
            - circleci-k8s-demo-mvn-V2

      - run: mvn dependency:go-offline
      - run:
          name: Build and *unit* test
          command: |
            mvn test -B  #run your tests


      - save_cache:
          paths:
            - ~/.m2
          key: circleci-k8s-demo-mvn-V2-{{ checksum "pom.xml" }}

      - store_test_results:
          path: target/surefire-reports




  package-docker:
    docker:
      - image: circleci/openjdk:8-jdk-browsers
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - circleci-k8s-demo-mvn-V2-{{ checksum "pom.xml" }}
            - circleci-k8s-demo-mvn-V2
      - run: mvn dependency:go-offline
      - run: cp .mvn/wrapper/settings.xml ~/.m2/settings.xml
      - run: echo "<settingsSecurity><master>${maven_security_master}</master></settingsSecurity>" > ~/.m2/settings-security.xml
      - setup_remote_docker
      - run:
          name: Publish Docker image with Jib
          command: |
            ./mvnw compile jib:build -B -DskipTests=true \
              -Dbuild.number=${CIRCLE_BUILD_NUM} \
              -Dcommit.hash=${CIRCLE_SHA1} \
              -Dcircle.workflow=${CIRCLE_WORKFLOW_ID} \
              -Dbuild.user=${CIRCLE_PROJECT_USERNAME} \
              -Dbuild.repo=${CIRCLE_PROJECT_REPONAME} 
      - run:
          name: Preserve Docker IMage tag 
          command: |
            MVN_VERSION=$(./mvnw -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive org.codehaus.mojo:exec-maven-plugin:1.3.1:exec)
            echo "export DOCKER_IMAGE=eddiewebb/circleci-k8s-demo:${MVN_VERSION}-b${CIRCLE_BUILD_NUM}" > /tmp/docker_image
      - persist_to_workspace:
          root: /tmp
          paths:
            - docker_image


  deploy-GCP:
    docker:
      - image: circleci/openjdk:8-jdk-browsers
    working_directory: ~/repo
    steps:
      - attach_workspace: 
          at: /tmp
      - run: 
          name: Install gcloud SDK
          command: |
            # Create environment variable for correct distribution
            export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"
            # Add the Cloud SDK distribution URI as a package source
            echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
            # Import the Google Cloud Platform public key
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
            # Update the package list and install the Cloud SDK
            sudo apt-get update -y && sudo apt-get install -y google-cloud-sdk kubectl
      - run: 
          name: Initialize & Authenticate gcloud SDK
          command: |
            echo "${GCP_KEY_FILE}" | base64 --decode >> /tmp/gcp_key.json
            gcloud auth activate-service-account --key-file /tmp/gcp_key.json
            gcloud config set project ${GCP_ACCOUNT_ID}
            gcloud config set compute/zone us-central1-a

            # does cluster exist? Create or load credentials
            if gcloud container clusters describe circleci-k8s-demo > /dev/null ;then
              echo "Our cluster exists, pull credentials into kubectl"
              gcloud container clusters get-credentials circleci-k8s-demo
            else
              echo "Creating cluster for first time"
              gcloud container clusters create circleci-k8s-demo --num-nodes=2
            fi

            #push image for first run, or update existing.
            source /tmp/docker_image
            echo "Deploying IMage: ${DOCKER_IMAGE}"
            if kubectl describe deployment/circleci-k8s-demo ;then
              echo "Updating image on existing deployment" 
              kubectl set image deployment/circleci-k8s-demo circleci-k8s-demo=${DOCKER_IMAGE}
            else
              echo "running first deployment"
              kubectl run circleci-k8s-demo --image=${DOCKER_IMAGE} --port 8080
            fi
            kubectl rollout status deployment/circleci-k8s-demo
            
            if kubectl get service circleci-k8s-demo ;then
              echo "Service is exposed"
            else
              echo "Exposing deployment on Load Balancer"
              kubectl expose deployment circleci-k8s-demo --type=LoadBalancer --port 80 --target-port 8080
            fi

      - run:
          name: Smoke Test k8s Deploy
          command: |
            # use jq or go templates to get LB IP
            CLUSTER_IP=$(kubectl get service circleci-k8s-demo -o json | jq -r '.["status"]["loadBalancer"]["ingress"][0]["ip"]')
            CLUSTER_IP=$(kubectl get service circleci-k8s-demo -o go-template='{{(index .status.loadBalancer.ingress 0).ip}}')
            echo "Testing against IP: ${CLUSTER_IP}"
            sleep 10
            HTTPCODE=`curl -s -m 5 -o /dev/null -w "%{http_code}" http://${CLUSTER_IP}/`
            if [ "$HTTPCODE" -ne 200 ];then
              echo "Application not available, failing deploy"
              exit 1
            fi

      - run:
          name: Update CloudFlare DNS with Cluster IP
          command: |
            # in our GCP example we leave our CloudFlare load balancer pointing to a sub-domain (k8sgcp.justademo.online)
            # So anytime we deploy, we use their DNS service to change that record to the latest, without needing to update the Load Balancer pools

            # purge any existing records for our GCP subdomain.
            existing_records=( $(curl -X GET "https://api.cloudflare.com/client/v4/zones/${CLOUDFLARE_DNS_ZONE}/dns_records?type=A&${K8S_DOMAIN_GCP}" \
                -H "X-Auth-Email: ${CLOUDFLARE_EMAIL}" \
                -H "X-Auth-Key: ${CLOUDFLARE_API_KEY}" \
                -H "Content-Type: application/json"   | jq -r '.result[].id') )

            for record in ${existing_records[@]}; do
               curl -X DELETE "https://api.cloudflare.com/client/v4/zones/${CLOUDFLARE_DNS_ZONE}/dns_records/${record}" \
               -H "X-Auth-Email: ${CLOUDFLARE_EMAIL}" \
               -H "X-Auth-Key: ${CLOUDFLARE_API_KEY}" \
               -H "Content-Type: application/json"
            done

            # Create new record with latest cluster IP.
            CLUSTER_IP=$(kubectl get service circleci-k8s-demo -o go-template='{{(index .status.loadBalancer.ingress 0).ip}}')
            curl -X POST "https://api.cloudflare.com/client/v4/zones/${CLOUDFLARE_DNS_ZONE}/dns_records" \
               -H "X-Auth-Email: ${CLOUDFLARE_EMAIL}" \
               -H "X-Auth-Key: ${CLOUDFLARE_API_KEY}" \
               -H "Content-Type: application/json" \
               --data '{"type":"A","name":"'${K8S_DOMAIN_GCP}'","content":"'${CLUSTER_IP}'","ttl":120,"priority":10,"proxied":false}'
      



  cloudflare:
    docker:
      - image: circleci/python:2
    working_directory: ~/repo
    steps:
      - run:
          name: Update CloudFlare Load Balancer
          command: |
            # create or verify LB exists on cname
            # Create or update origin pool for GCP using ${K8S_DOMAIN_GCP}
            echo "Waiting for premium support."
      - run:    
          name: Update CloudFlare Proxy to Force SSL
          command: |
            curl -X PATCH "https://api.cloudflare.com/client/v4/zones/${CLOUDFLARE_DNS_ZONE}/settings/always_use_https" \
                 -H "X-Auth-Email: ${CLOUDFLARE_EMAIL}" \
                 -H "X-Auth-Key: ${CLOUDFLARE_API_KEY}" \
                 -H "Content-Type: application/json" \
                 --data '{"value":"on"}'


